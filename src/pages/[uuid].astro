---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { printToHtml, printToHtmlAndTruncate, prisma, toRelativeDate } from '../common';
import { decode } from 'html-entities';
import NoticeItem from '../components/NoticeItem.astro';

const { uuid } = Astro.params;
const notice = await prisma.notice.findUnique({
  where: {
    id: uuid,
  },
  include: {
    source: true,
  },
});

const limit = 12;

const filterCondition = {
  where: {
    sourceId: notice?.sourceId,
  },
};

const notices = await prisma.notice.findMany({
  orderBy: [
    {
      publishedDate: 'desc',
    },
    {
      title: 'desc',
    },
  ],
  ...filterCondition,
  take: limit,
});

if (!notice) {
  return Astro.redirect('/404');
}

if (notice?.source.name === 'Reddit') {
  notice.body = decode(notice.body, { level: 'html5' });
}

if (notice?.source.name === 'Remotive') {
  // Remove the color style from the html and empty P tags
  const cleanHtml = (htmlString: string) => {
    const cleaned = htmlString.replace(/style="[^"]*color:[^";]*;?[^"]*"/g, '');
    return cleaned;
  };
  notice.body = cleanHtml(notice.body);
}
---

<Layout title={notice.title || 'Job Title'}>
  <Header />
  <main class="p-1 md:p-2 max-w-7xl m-auto">
    <div class="p-4 rounded-xl space-y-4">
      <div class="inline-block">
        <h2>{notice.source.name}</h2>
      </div>
      <p class="text-xs font-extralight">{toRelativeDate(notice.publishedDate)}</p>
      <a class="block" href={notice.url}>
        <button
          class="border border-primary-200 rounded-xl py-2 px-8 md:px-5 w-full md:w-fit font-bold text-primary-200"
        >
          Apply
        </button>
      </a>
      <a class="block" href="/">
        <button
          class="border border-secondary-200 rounded-xl py-2 px-8 md:px-5 w-full md:w-fit font-bold text-secondary-200"
        >
          Go Back
        </button>
      </a>
    </div>
    <div class="flex justify-end flex-col md:flex-row space-x-0 space-y-2 md:space-y-0 md:space-x-4">
      <a class="block" href={notice.url}> </a>
    </div>
    <div class="flex flex-col gap-2">
      <section>
        <h1 class="text-3xl font-bold py-4">{printToHtml(notice.title)}</h1>
        <div class="bg-neutral-950 border border-neutral-800 px-4 overflow-y-scroll">
          <article class="prose prose-invert md:prose-lg lg:prose-xl" set:html={notice.body} />
        </div>
      </section>
      <section>
        <h1 class="text-3xl font-bold py-4">More from {notice.source.name}</h1>
        <div class="max-h-screen overflow-y-scroll p-4 border border-neutral-800 gap-2 flex flex-col">
          {
            notices.map((relatedNotice, i) => {
              const bg = i % 2 === 0 ? 'bg-gray-200' : 'bg-gray-300';
              const injected = {
                ...relatedNotice,
                source: notice.source,
              };
              return <NoticeItem notice={injected} idx={i} />;
            })
          }
        </div>
      </section>
    </div>
  </main>
</Layout>
