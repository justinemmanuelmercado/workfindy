---
import Layout from '../layouts/Layout.astro';
import { buildQueryString, prisma, timeAgo } from '../common';
import _ from 'lodash';
import { decode } from 'html-entities';
import '../styles/index.scss';

const { truncate } = _;

const limit = 10;
const page = parseInt(Astro.url.searchParams.get('page') || '1');
const sourcesQuery = Astro.url.searchParams.getAll('sources[]');

const filterCondition = {
  where: {
    source:
      sourcesQuery.length > 0
        ? {
            name: {
              in: sourcesQuery,
            },
          }
        : undefined,
  },
};

const currentPageIndex = page ? (page - 1) * limit : 0;
const noticesCount = await prisma.notice.count(filterCondition);
const notices = await prisma.notice.findMany({
  orderBy: [
    {
      publishedDate: 'desc',
    },
    {
      title: 'desc',
    },
  ],
  ...filterCondition,
  include: {
    source: true,
  },
  take: limit,
  skip: currentPageIndex,
});

const sources = await prisma.source.findMany();

// Removes html tags and escaped html tags
const printToHtmlAndTruncate = (text: string, length: number) => {
  // If id is in cache return it
  const htmlString = decode(text, { level: 'html5' });
  const html = htmlString.replace(/<[^>]*>?/gm, '');
  // Set cache for notice here
  // Double encoding because of stupid strings from reddit like this I&amp;#39;m
  return truncate(decode(html), { length, separator: '...' });
};

const toRelativeDate = (date: Date | null) => {
  if (!date) {
    return 'Unknown';
  }
  return timeAgo.format(date);
};

const numberOfPages = Math.ceil(noticesCount / limit);
let startPage = Math.max(1, page - 2);
let endPage = Math.min(numberOfPages, page + 2);
let pageNumbers = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
---

<Layout title="Welcome to Astro.">
  <section class="h-full flex-1 flex flex-col">
    <div class="flex flex-col p-4 md:p-8 items-center">
      <h1 class="text-2xl md:text-6xl font-bold">Find Freedom in Your Career</h1>
      <p>Top Remote Jobs, Updated Daily</p>
    </div>
    <div
      class="flex flex-col h-full lg:max-h-[90%] flex-grow md:flex-row w-full min-w-[320px] space-x-0 md:space-x-2 space-y-8 md:space-y-0"
    >
      <div class="flex flex-col space-y-2">
        <form
          action="/"
          method="GET"
          class="rounded-xl space-y-1 border flex flex-col border-neutral-900 bg-gray-100 p-2 h-fit"
        >
          <span class="flex md:flex-col overflow-x-auto space-x-2 md:space-x-0 space-y-0 md:space-y-1">
            {
              sources.map((source, i) => {
                return (
                  <span class="block">
                    <input
                      id={source.name}
                      name="sources[]"
                      value={source.name}
                      class="hidden"
                      type="checkbox"
                      checked={sourcesQuery.includes(source.name)}
                    />
                    <label
                      class={`source flex justify-between cursor-pointer items-center border w-full border-neutral-950 p-4 rounded-xl bg-gray-200 source-parent`}
                      for={source.name}
                    >
                      {source.name}
                    </label>
                  </span>
                );
              })
            }
          </span>
          <hr />
          <button type="submit" class="p-4 font-bold rounded-xl border border-neutral-950 bg-gray-50 w-full"
            >Filter</button
          >
        </form>
        <div class="bg-gray-100 p-4 rounded-xl">
          <p>Get Notified on Discord!</p>
        </div>
        <div class="bg-gray-100 p-4 rounded-xl">
          <input
            type="text"
            placeholder="you@example.com"
            class="rounded-xl p-4 text-gray-500 bg-neutral-100 border border-neutral-500"
          />
          <p>Receive updates through email!</p>
        </div>
      </div>
      <div class="flex flex-col space-y-4">
        <div class="flex-1 overflow-y-auto flex flex-col rounded-xl border border-neutral-900 p-4 space-y-2">
          {
            notices.map((notice, i) => {
              const bg = i % 2 === 0 ? 'bg-gray-200' : 'bg-gray-300';
              return (
                <div class={`flex flex-col p-8 rounded-xl ${bg} shadow-sm border border-neutral-800 space-y-2 md:p-4`}>
                  <div class="flex">
                    <p class="text-xs font-extralight rounded-xl border border-neutral-700 px-2">
                      {notice.source.name}
                    </p>
                  </div>
                  <p class="font-bold">{notice.title}</p>
                  <p>{printToHtmlAndTruncate(notice.body, 200)}</p>
                  <p class="text-xs font-extralight">{toRelativeDate(notice.publishedDate)}</p>
                  <hr />
                  <div class="flex justify-end flex-col md:flex-row space-x-0 space-y-2 md:space-y-0 md:space-x-4">
                    <a class="block" href={`/${notice.id}`}>
                      <button class="border border-neutral-800 rounded-xl py-2 px-8 md:px-5 w-full md:w-fit font-bold text-neutral-300">
                        Details
                      </button>
                    </a>
                    <a class="block" href={notice.url}>
                      <button class="border border-primary-200 rounded-xl py-2 px-8 md:px-5 w-full md:w-fit font-bold text-primary-200">
                        Apply
                      </button>
                    </a>
                  </div>
                </div>
              );
            })
          }
        </div>
        <div class="flex-shrink bg-gray-100 rounded-xl p-2 border border-neutral-800 flex flex-col items-center">
          <p>Showing {currentPageIndex + 1} to {currentPageIndex + notices.length} of {noticesCount}</p>
          <div class="flex flex-shrink-0 justify-center items-center space-x-2 w-full">
            <div class="pagination">
              <a
                href={`/?${buildQueryString([
                  { key: 'page', value: `1` },
                  { key: 'sources[]', value: sourcesQuery },
                ])}`}
              >
                <button class="border border-neutral-900 rounded-xl px-2 py-1">First</button>
              </a>

              {startPage > 1 && <span>...</span>}

              {
                pageNumbers.map((i) => (
                  <a
                    href={`/?${buildQueryString([
                      { key: 'page', value: `${i}` },
                      { key: 'sources[]', value: sourcesQuery },
                    ])}`}
                  >
                    <button
                      class={`border border-neutral-900 rounded-xl px-2 py-1 ${
                        i === page ? 'bg-primary-200' : 'bg-gray-200'
                      }`}
                    >
                      {i}
                    </button>
                  </a>
                ))
              }

              {endPage < numberOfPages && <span>...</span>}

              <a
                href={`/?${buildQueryString([
                  { key: 'page', value: `${numberOfPages}` },
                  { key: 'sources[]', value: sourcesQuery },
                ])}`}
              >
                <button class="border border-neutral-900 rounded-xl px-2 py-1">Last</button>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>
