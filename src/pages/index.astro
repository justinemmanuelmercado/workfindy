---
import Layout from '../layouts/Layout.astro';
import { buildQueryString, prisma, timeAgo } from '../common';
import _ from 'lodash';
import { decode } from 'html-entities';

const { truncate } = _;

const limit = 10;
const noticesCount = await prisma.notice.count();
const page = parseInt(Astro.url.searchParams.get('page') || '1');
const sourcesQuery = Astro.url.searchParams.getAll('sources[]');
const numberOfPages = Math.ceil(noticesCount / limit);
let startPage = Math.max(1, page - 2);
let endPage = Math.min(numberOfPages, page + 2);
let pageNumbers = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
const notices = await prisma.notice.findMany({
  orderBy: [
    {
      publishedDate: 'desc',
    },
    {
      title: 'desc',
    },
  ],
  where: {
    source:
      sourcesQuery.length > 0
        ? {
            name: {
              in: sourcesQuery,
            },
          }
        : undefined,
  },
  include: {
    source: true,
  },
  take: limit,
  skip: page ? (page - 1) * limit : 0,
});

const sources = await prisma.source.findMany();

// Removes html tags and escaped html tags
const printToHtmlAndTruncate = (text: string, length: number) => {
  // If id is in cache return it
  const htmlString = decode(text, { level: 'html5' });
  const html = htmlString.replace(/<[^>]*>?/gm, '');
  // Set cache for notice here
  // Double encoding because of stupid strings from reddit like this I&amp;#39;m
  return truncate(decode(html), { length, separator: '...' });
};

const toRelativeDate = (date: Date | null) => {
  if (!date) {
    return 'Unknown';
  }
  return timeAgo.format(date);
};
---

<style>
  :root {
    --background: #f3f4f6;
    --primary-50: #5617dd;
    --gray-50: #1f2231;
    --gray-400: #0c0f1c;
    --gray-500: #0b0e1c;
  }
  .source:after {
    content: '';
    height: 15px;
    width: 15px;
    border-radius: 15px;
    background-color: var(--background);
    display: block;
    margin-left: 15px;
  }
  input[type='checkbox']:checked + .source {
    background-color: var(--gray-500);
  }

  input[type='checkbox']:checked + .source::after {
    background-color: var(--primary-50);
  }
</style>

<Layout title="Welcome to Astro.">
  <section>
    <div class="flex flex-col py-5 sm:py-10 items-center">
      <h1 class="text-2xl sm:text-6xl font-bold">Find Freedom in Your Career</h1>
      <p>Top Remote Jobs, Updated Daily</p>
    </div>
    <div class="flex w-full mt-10 min-w-[320px] overflow-x-auto space-x-0 sm:space-x-2">
      <form
        action="/"
        method="GET"
        class="rounded-xl space-y-1 border hidden sm:block border-neutral-900 bg-gray-100 p-2"
      >
        {
          sources.map((source, i) => {
            return (
              <span class="block">
                <input
                  id={source.name}
                  name="sources[]"
                  value={source.name}
                  class="hidden"
                  type="checkbox"
                  checked={sourcesQuery.includes(source.name)}
                />
                <label
                  class={`source flex justify-between cursor-pointer items-center border w-full border-neutral-950 p-4 rounded-xl bg-gray-200 source-parent`}
                  for={source.name}
                >
                  {source.name}
                </label>
              </span>
            );
          })
        }
        <hr />
        <button class="p-4 font-bold rounded-xl border border-neutral-950 bg-gray-500 w-full">Show All</button>
        <button type="submit" class="p-4 font-bold rounded-xl border border-neutral-950 bg-gray-50 w-full"
          >Filter</button
        >
      </form>
      <div class="space-y-4">
        <div class="overflow-y-auto sm:max-h-[60vh] rounded-xl border border-neutral-900 p-0 sm:px-2 space-y-2">
          {
            notices.map((notice, i) => {
              const bg = i % 2 === 0 ? 'bg-gray-200' : 'bg-gray-300';
              return (
                <div class={`flex flex-col border border-neutral-950 p-8 rounded-xl ${bg} space-y-2 sm:p-4`}>
                  <div class="flex">
                    <p class="text-xs font-extralight rounded-xl border border-neutral-700 px-2">
                      {notice.source.name}
                    </p>
                  </div>
                  <p class="font-bold">{notice.title}</p>
                  <p>{printToHtmlAndTruncate(notice.body, 200)}</p>
                  <p class="text-xs font-extralight">{toRelativeDate(notice.publishedDate)}</p>
                  <div class="flex justify-end flex-col sm:flex-row space-x-0 space-y-2 sm:space-y-0 sm:space-x-4">
                    <a class="block" href="#">
                      <button class="border border-neutral-800 rounded-xl py-2 px-8 sm:px-5 w-full sm:w-fit font-bold text-neutral-300">
                        Generate Cover Letter
                      </button>
                    </a>
                    <a class="block" href={`/${notice.id}`}>
                      <button class="border border-neutral-800 rounded-xl py-2 px-8 sm:px-5 w-full sm:w-fit font-bold text-neutral-300">
                        Details
                      </button>
                    </a>
                    <a class="block" href={notice.url}>
                      <button class="border border-primary-200 rounded-xl py-2 px-8 sm:px-5 w-full sm:w-fit font-bold text-primary-200">
                        Apply
                      </button>
                    </a>
                  </div>
                </div>
              );
            })
          }
        </div>
        <div class="flex justify-center items-center space-x-2 w-full">
          <div class="pagination">
            <a
              href={`/?${buildQueryString([
                { key: 'page', value: `1` },
                { key: 'sources[]', value: sourcesQuery },
              ])}`}
            >
              <button class="border border-neutral-900 rounded-xl px-2 py-1">First</button>
            </a>

            {startPage > 1 && <span>...</span>}

            {
              pageNumbers.map((i) => (
                <a
                  href={`/?${buildQueryString([
                    { key: 'page', value: `${i}` },
                    { key: 'sources[]', value: sourcesQuery },
                  ])}`}
                >
                  <button
                    class={`border border-neutral-900 rounded-xl px-2 py-1 ${
                      i === page ? 'bg-primary-200' : 'bg-gray-200'
                    }`}
                  >
                    {i}
                  </button>
                </a>
              ))
            }

            {endPage < numberOfPages && <span>...</span>}

            <a
              href={`/?${buildQueryString([
                { key: 'page', value: `${numberOfPages}` },
                { key: 'sources[]', value: sourcesQuery },
              ])}`}
            >
              <button class="border border-neutral-900 rounded-xl px-2 py-1">Last</button>
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>
